// Most used mixins.
//
// Note: If you use a framework (bootstrap, zurb etc.) that includes mixins you can import them too or remove this file.

/*
    Relative centering
    Usage: 
    @include relative-centering(top) to vertical centering;
    @include relative-centering(left) to horizontal centering; 
*/
@mixin relative-centering($position) {
  position: relative;
  $position: 50%;
  transform: translate(-50%);
}

/* Absolute centering
The same usage like Relative centering */
@mixin absolute-vertical-centering {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
}

@mixin absolute-horizontal-centering {
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
}

/*
    Flex centering content in wrapper
    Usage:
    @include flex-centering(relative, center);
    css output:
    .className {
      display: flex;
      justify-content: center;
      align-items: center;
      position: relative;
    }
*/
@mixin flex-centering($justify-content:center) {
  display: flex;
  justify-content: $justify-content;
  align-items: center;
}

/*
    font-smothing
    @include font-smoothing(on);
    @include font-smoothing(off); 
*/
@mixin font-smoothing($value: on) {
  @if $value==on {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }
  @else {
    -webkit-font-smoothing: subpixel-antialiased;
    -moz-osx-font-smoothing: auto;
  }
}

/*
    Mixin for styling form-placeholders
    @example scss - Usage
    @include placeholder {
      color: #333;
    }
    input[type='text'],
    input[type='tel'],
    input[type='email'] {
      @include placeholder {
        color: red;
      }
    } 
*/

@mixin placeholder {
  &::-webkit-input-placeholder {
    @content;
  }
  &::-moz-placeholder {
    opacity: 1;
    @content;
  }
  &:-moz-placeholder {
    @content;
  }
  &:-ms-input-placeholder {
    @content;
  }
  &.placeholder {
    @content;
  }
}

/*
    When you use ::before and ::after,
    you always need these three lines of code. Using this mixin,
    you save your time writing them.
    See below for an example of using mixin without any arguments.
    .element::after {
      @include pseudo;
      top: -1rem;
      left: -1rem;
      width: 1rem;
      height: 1rem;
    }
    CSS output: 
    .element::after {
      display: block;
      position: absolute;
      content: '';
      top: -1rem;
      left: -1rem;
      width: 1rem;
      height: 1rem;
    }
*/

@mixin pseudo($display: block, $pos: absolute, $content: '') {
  content: $content;
  display: $display;
  position: $pos;
}

/*
    Square

    Usage:
    .element {
      @include square(60px);
    }

    CSS output: 
    .element {
      width: 60px;
      height: 60px;
    }
*/
@mixin square($size) {
  width: $size;
  height: $size;
}

/*
    Responsive switch

    Usage:
    .element {
      @include square('tablet-lg');
    }
    CSS output: 
    .element {
      display: none;
    }
    @media (max-width: 1024px) {
      .hamburger {
        display: block;
      }
    }
*/
@mixin mobileVisible($breakPoint) {
  display: none;
  @include media('<=#{$breakPoint}') {
    display: block;
  }
}